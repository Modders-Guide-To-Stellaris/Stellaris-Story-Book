
# Archaeo | Communication Hub - Setup

setup_jonan_digsite = {
	random_system_planet = {
		limit = {
			is_planet_class = pc_barren
			has_anomaly = no
			NOT = { exists = archaeological_site }
			NOT = { has_planet_flag = suppress_archaeological_sites }
		}
            create_archaeological_site = ssp_communication_hub_archsite
	}
}

death_cult_sacrifice_effect = {
	#First we need to get the variables that determine how big the boon is

	# Formula is ( initiates * random factor ) / (total pops), and then round that to the nearest 0.1 to avoid weird-looking results
	random_list = {
		#This is effectively ( base * random ), where base = 30
		#It is balanced so that sacrificing 5% of your pops gives a really good result

		1 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 15
			}
		}
		4 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 20
			}
		}
		1 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 25
			}
		}
	}
	if = { #small empire penalty: losing 1 pop out of 30 is not the same as 30 out of 900 with logarithmic growth
		limit = { num_pops < 100 }
		multiply_variable = {
			which = sacrifice_random_mult
			value = 0.8
		}
		if = {
			limit = { num_pops < 50 }
			multiply_variable = {
				which = sacrifice_random_mult
				value = 0.8
			}
		}
	}
	export_trigger_value_to_variable = {
		trigger = num_assigned_jobs
		parameters = {
			job = mortal_initiate
		}
		variable = sacrifice_result_mult
	}
	every_subject = {
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = {
				job = overlord_mortal_initiate
			}
			variable = sacrifice_vassal_amount
		}
		prev = {
			change_variable = {
				which = sacrifice_result_mult
				value = prev.sacrifice_vassal_amount
			}
		}
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = {
				job = overlord_mortal_initiate_drone
			}
			variable = sacrifice_vassal_amount_drone
		}
		prev = {
			change_variable = {
				which = sacrifice_result_mult
				value = prev.sacrifice_vassal_amount_drone
			}
		}
	}
	set_variable = {
		which = sacrifice_result_current_count
		value = sacrifice_result_mult
		}
	# We do some maths here to calculate the effective percentage of your population sacrificed
	# and cap the bonus to 15% as if you'd sacrificed 15% of your population if it is greater.
	divide_variable = {
		which = sacrifice_result_mult
		value = trigger:num_pops
	}
	if = {
		limit = {
			check_variable = {
				which = sacrifice_result_mult
				value >= 0.15
			}
		}
		set_variable = {
			which = sacrifice_result_mult
			value = 0.15
		}
	}
	multiply_variable = {
		which = sacrifice_result_mult
		value = sacrifice_random_mult
	}
	clear_variable = sacrifice_random_mult
	round_variable_to_closest = {
		which = sacrifice_result_mult
		value = 0.1
	}

	#We also need the edicts length multiplier for the modifiers
	export_modifier_to_variable = {
		modifier = edict_length_mult
		variable = edict_length_modifiers
	}
	change_variable = { # Needs to be 1 + mult
		which = edict_length_modifiers
		value = 1
	}

	#Now we do the sacrifice
	every_owned_pop = {
		limit = { has_job = mortal_initiate }
		kill_pop = yes
	}
	every_subject = {
		limit = {
			any_owned_pop = {
				OR = {
					has_job = overlord_mortal_initiate
					has_job = overlord_mortal_initiate_drone
				}
			}
		}
		set_country_flag = recent_overlord_sacrifice
		every_owned_pop = {
			limit = {
				OR = {
					has_job = overlord_mortal_initiate
					has_job = overlord_mortal_initiate_drone
				}
			}
			kill_pop = yes
		}
	}

	# Scale result by the level of any death_cult councilor.
	multiply_variable = {
		which = sacrifice_result_mult
		value = value:sacrifice_edict_power_councilor_death_cult
	}
}

